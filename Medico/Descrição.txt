Nosso aplicativo vai ser uma IA que descobre a doença de um paciente quando ele passar os sintomas.
---------------------------------------------------

Softwares usados:
Excel
Google colab
Android Studio
VS code

---------------------------------------------------------------
Excel:

Foi onde criamos o CSV com as informações que a IA vai ter doença, sintomas e remédios
Uma tabela basicamente. (Doen.csv)

------------------------------------------------------
Google colab

Foi onde fizemos a IA em linguagem python (Doencasss.ipynb)
Primairamente importamos todas as bibliotecas que iriamos precisar para o treinamento da IA tensorflow, pandas e numpy
Depois chamamos o arquivo CSV para a IA utilizar na chamada
Apos isso convertemos todas as colunas da tabela em numeros pois a IA so consegue ler valores numéricos
Apos isso utilizamos o keras.sequencial ela provê uma estrutura que permite compilar redes neurais combinando camadas de diferentes dimensões e funções de ativação, tornando o ciclo de desenvolvimento de novos modelos de aprendizado de máquina muito mais rápido ,(utilizamos as funções de ativações gelu e sigmoid)
Depois treinamos a IA em 10 épocas onde a acuracia foi 100%
---------------------------------------------------------------
Android Studio

Fizemos no android studio o app
Onde na primeira tela o usaurio salva suas informações e via SharedPreferences salvamos essas informaçoes
Na segunda tela o usuario clica no listview de sintomas onde via JSON os sintomas são enviados ao servidor para que a IA analise os sintomas e mande a doença.
Usamos para enviar os dados a função RequestQueue,StringRequest para mandas os dados para um Volley e converter para JSON.
----------------------------------------------------------------------------
Essa é a main

if name == 'main':
    from sys import argv

    if len(argv) == 2:
        run(port=int(argv[1]))
    else:
        run()

Run, onde ele monta o weserver, pega a porta que vc especificou e tals

def run(server_class=HTTPServer, handler_class=S, port=8080):
    logging.basicConfig(level=logging.INFO)
    server_address = ('', port)
    httpd = server_class(server_address, handler_class)
    logging.info('Starting httpd...\n')
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass
    httpd.server_close()
    logging.info('Stopping httpd...\n')

Essa é a classe Handler, que é onde vc vai definir seus gets e posts

class S(BaseHTTPRequestHandler):
    def _set_response(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

    def do_GET(self):
        logging.info("GET request,\nPath: %s\nHeaders:\n%s\n", str(self.path), str(self.headers))
        self._set_response()
        self.wfile.write("GET request for {}".format(self.path).encode('utf-8'))

    def do_POST(self):
        content_length = int(self.headers['Content-Length']) # <--- Gets the size of data
        post_data = self.rfile.read(content_length) # <--- Gets the data itself
        logging.info("POST request,\nPath: %s\nHeaders:\n%s\n\nBody:\n%s\n",
                str(self.path), str(self.headers), post_data.decode('utf-8'))
        resultPost = json.loads(post_data.decode('utf-8'))
       
        var= resultPost['sintoma']
        var= resultPost['sintoma']
        var= resultPost['sintoma']
        var= resultPost['sintoma']

         model = keras.models.load_model('Doencasss.ipynb')

        self._set_response()
        self.wfile.write("POST request for {}".format(self.path).encode('utf-8'))


	Ai dentro dela temos

	Montagem do cabeçalho da requisição

	def _set_response(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

	O metodo get    
	def do_GET(self):
        logging.info("GET request,\nPath: %s\nHeaders:\n%s\n", str(self.path), str(self.headers))
        self._set_response()
        self.wfile.write("GET request for {}".format(self.path).encode('utf-8'))

	E o Post

	def do_POST(self):
        content_length = int(self.headers['Content-Length']) # <--- Gets the size of data
        post_data = self.rfile.read(content_length) # <--- Gets the data itself
        logging.info("POST request,\nPath: %s\nHeaders:\n%s\n\nBody:\n%s\n",
                str(self.path), str(self.headers), post_data.decode('utf-8'))
        resultPost = json.loads(post_data.decode('utf-8'))
       
        var= resultPost['sintoma']
        var= resultPost['sintoma']
        var= resultPost['sintoma']
        var= resultPost['sintoma']

         model = keras.models.load_model('Doencasss.ipynb')

        self._set_response()
        self.wfile.write("POST request for {}".format(self.path).encode('utf-8'))

	Basicamente é isso o webserver